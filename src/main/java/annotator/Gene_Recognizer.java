/**
 * extract gene-related phrases or words
 */
package annotator;

import java.io.File;
import java.io.IOException;

import org.apache.uima.UimaContext;
import org.apache.uima.analysis_component.JCasAnnotator_ImplBase;
import org.apache.uima.analysis_engine.AnalysisEngineProcessException;
import org.apache.uima.cas.FSIterator;
import org.apache.uima.jcas.JCas;
import org.apache.uima.jcas.tcas.Annotation;

import type.Gene;
import type.Sentence;

import com.aliasi.chunk.Chunk;
import com.aliasi.chunk.ConfidenceChunker;
import com.aliasi.util.AbstractExternalizable;

import java.util.Iterator;

/**
 * Filter out gene-related words
 * 
 * @author Kang Huang
 * @version 1.0 Build on Sep 23, 2014.
 */
public class Gene_Recognizer extends JCasAnnotator_ImplBase {
  /**
   * the maximum length of potential gene words
   */
  private static final int MAX_N_BEST_CHUNKS = 15;

  /**
   * the name of NER gene model
   */
  private File modelFile = null;

  /**
   * the handler to load the model and process given words
   */
  private ConfidenceChunker chunker = null;

  @Override
  /** 
   *<p>The framework supplies this AnalysisComponent with a reference to the UimaContext that it will use,<br>
   * for example to access configuration settings or resources. This AnalysisComponent should store a <br>
   * reference to its the UimaContext for later use.<br>
   * 
   * @param context
   *          Provides access to external resources (other than the CAS).Performs any startup tasks required by this component. The framework calls this method only once, just 
   * after the AnalysisComponent has been instantiated. 
   * 
   * @throws ClassNotFoundException    Description of ClassNotFoundException found no such model
   * @throws IOException Description of  IOException fail to visit model
   * 
   * @return 
   */
  public void initialize(UimaContext context) {
    modelFile = new File("src/ne-en-bio-genetag.HmmChunker");
    try {
      chunker = (ConfidenceChunker) AbstractExternalizable.readObject(modelFile);
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (IOException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
  }

  @Override
  /**
   *  get content of annotation sentence and use NER gene model to classify the sentence in each annotation, 
   *  obtain start index and end index of filtered words and
   *  revise by subtracting the number of blanks. the gene annotation also stored the ID and words. 
   * 
   * @param aCas 
   *          A JCas object provides the starting point for working with the CAS using Java Cover Classes for each  type, generated by the utility JCasGen. 
   *
   * @throws ClassNotFoundException   
   *           Description of ClassNotFoundException found no such model
   * @throws IOException 
   *            Description of IOException fail to visit model
   */
  public synchronized void process(JCas aCas) throws AnalysisEngineProcessException {
    FSIterator<Annotation> it = aCas.getAnnotationIndex(Sentence.type).iterator();
    try {
      chunker = (ConfidenceChunker) AbstractExternalizable.readObject(modelFile);
    } catch (ClassNotFoundException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (IOException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
    while (it.hasNext()) {
      Sentence annot = (Sentence) it.next();
      String temp = annot.getWords();
      char[] cs = temp.toCharArray();
      Iterator<Chunk> gene_it = chunker.nBestChunks(cs, 0, cs.length, MAX_N_BEST_CHUNKS);
      while (gene_it.hasNext()) {
        Chunk chunk = gene_it.next();
        double conf = Math.pow(2.0, chunk.score());
        if (conf < 0.65) {
          break;
        }
        int start = chunk.start();
        int end = chunk.end();
        String phrase = temp.substring(start, end);
        int outshift = 0, innershift = 0;
        outshift = countBlanks(temp, 0, start);
        innershift = countBlanks(temp, start, end);
        Gene gene = new Gene(aCas);
        gene.setBegin(start);
        gene.setEnd(end);
        gene.setID(annot.getID());
        gene.setWords(phrase);
        gene.setConfidence(conf);
        gene.setOutershift(outshift);
        gene.setInnershift(innershift);
        gene.addToIndexes(aCas);
      }
    }
  }
  /**
   * count the blanks in one phrase
   * @param temp
   * @param start
   * @param end
   * @return
   */
  private int countBlanks(String phrase, int start, int end) {
    int count = 0;
    for (int i = start; i < end; i++) {
      if (phrase.charAt(i) == ' ') {
        count++;
      }
    }
    return count;
  }
}
